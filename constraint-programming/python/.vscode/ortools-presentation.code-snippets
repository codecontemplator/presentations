{
	// Place your python workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Import ortools": {
		"scope": "python",
		"prefix": "#import ortools",
		"body": [
			"from ortools.sat.python import cp_model",
		]
	},
	"Import typing": {
		"scope": "python",
		"prefix": "#import typing",
		"body": [
			"from typing import NamedTuple, Any"
		]
	},
	"Sudoku example": {
		"scope": "python,csharp",
		"prefix": "#sudoku",
		"body": [
			"\"010020300004005060070000008006900070000100002030048000500006040000800106008000000\""
		]
	},
	"Sudoku cell": {
		"scope": "python",
		"prefix": "#cell",
		"body": [
			"class Cell(NamedTuple):",
			"    row: int",
			"    col: int",
			"    block: int",
			"    value: Any"
		]
	},
	"Truck class": {
		"scope": "python",
		"prefix": "#truck class",
		"body": [
			"class Truck(NamedTuple):"
			"    capacity: int"
		]
	},
	"Box class": {
		"scope": "python",
		"prefix": "#box class",
		"body": [
			"class Box(NamedTuple):"
			"    weight: int"
		]
	},
	"Trucks data": {
		"scope": "python",
		"prefix": "#trucks data",
		"body": [
			"trucks = [Truck(3000), Truck(5000), Truck(8000)]"
		]
	},
	"Box data": {
		"scope": "python",
		"prefix": "#boxes data",
		"body": [
			"boxes = [Box(3000), Box(3000), Box(4000), Box(2000)]"
		]
	},
	"Ortools model": {
		"scope": "python",
		"prefix": "#model",
		"body": [
			"model = cp_model.CpModel()",
		]
	},
	"Ortools solver": {
		"scope": "python",
		"prefix": "#solver",
		"body": [
			"solver = cp_model.CpSolver()",
			"status = solver.Solve(model)",
			"if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:",
			"    print(\"solved\")",
			"else:",
			"	print(\"not solved\")"
		]
	},
	"Ortools status check": {
		"scope": "python",
		"prefix": "#status check",
		"body": [
			"if status != cp_model.FEASIBLE and status != cp_model.OPTIMAL:",
    		"  print(\"failed\")",
    		"  exit(-1)"
		]
	}
}